// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // neon.tech  aiven.io
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String?     @unique
  name      String?
  number    BigInt      @unique
  password  String
  Balance   Balance[]
  Onramping Onramping[]
  sendTrsxn p2pTransaction[] @relation(name: "fromUserRelation")
  receivedTrsxn p2pTransaction[] @relation(name: "toUserRelation")
}

model Balance {
  id     Int  @id @default(autoincrement())
  amount Int
  locked Int
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Onramping {
  id        Int             @id @default(autoincrement())
  userId    Int
  startTime DateTime
  status    OnrampingStatus
  token     String          @unique
  provider  String
  amount    Int
  user      User            @relation(fields: [userId], references: [id])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model p2pTransaction {
  id         Int     @id @default(autoincrement())
  amount     Int 
  timestamp  DateTime
  toUserId   Int
  fromUserId Int
  toUser     User   @relation(name: "toUserRelation", fields: [toUserId], references: [id])
  fromUser   User   @relation(name: "fromUserRelation", fields: [fromUserId], references: [id])

}

enum AuthType {
  Google
  Github
}

enum OnrampingStatus {
  pending
  failed
  success
}
